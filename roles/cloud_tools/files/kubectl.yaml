---
- name: Package Variable Setting
  ansible.builtin.set_fact:
    app: "kubectl"
    app_name: "Kubectl"

- name: Set up cloud management utilities 
  block:
  # Kubernetes command-line tool
  - name: Install {{ app_name }}
    command: "{{ app_dir }}/binenv install {{ app }}"
    args:
      creates: "{{ app_dir }}/{{ app }}"

  - name: Create link to {{ app_name }}
    ansible.builtin.file:
      src: /usr/local/bin/kubectl
      dest: /usr/bin/kubectl
      state: link
    when: role == 'master' or role == 'combi' or ansible_distribution == "RedHat"
    ignore_errors: true

  # Generate completion script 
  - name: Check if completion script exists
    stat:
      path: "/etc/bash_completion.d/{{ app }}"
    register: completion_script_stat

  - block:
      - name: Generate completion script
        command: "{{ app_dir }}/{{ app }} completion bash"
        register: completion_script
        changed_when: false

      - name: Save completion script
        copy:
          content: "{{ completion_script.stdout }}"
          dest: "/etc/bash_completion.d/{{ app }}"
          mode: "0644"
    when: not completion_script_stat.stat.exists

  # Create local customizations
  - name: Remove alias for {{ app_name }}
    ansible.builtin.lineinfile:
      path: "/home/{{ ansible_user }}/.bashrc"
      line: "alias k='/usr/bin/kubectl'"
      state: absent
  
  - name: Add alias for {{ app_name }}
    ansible.builtin.lineinfile:
      path: "/home/{{ ansible_user }}/.bashrc"
      line: "alias k='/usr/local/bin/kubectl'"
      create: yes

  - name: Add completion for alias k
    ansible.builtin.lineinfile:
      path: "/home/{{ ansible_user }}/.bashrc"
      line: "complete -F __start_kubectl k"
      create: yes  

  - name: Create a kube directory
    ansible.builtin.file:
      path: "/home/{{ ansible_user }}/.kube"
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0750'

  - name: Check if kubeconfig exists
    stat:
      path: "{{ kubeconfig_source_path | default('~/.kube/config') }}"
    register: kubeconfig_src_check
    delegate_to: localhost
    run_once: true
    ignore_errors: yes
    become: no

  - name: Copy kubeconfig to remote servers
    ansible.builtin.copy:
      src: "{{ kubeconfig_source_path | default('~/.kube/config') }}"
      dest: "/home/{{ ansible_user }}/.kube/config"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0600'
      remote_src: false
    when: 
      - ansible_connection != 'local'
      - inventory_hostname not in ['localhost', '127.0.0.1']
      - kubeconfig_src_check.stat.exists | default(false)

  # Show installed version
  - name: Check {{ app_name }} version
    command: "{{ app_dir }}/{{ app }} version --client"
    register: "install_result"
    changed_when: false
    ignore_errors: true

  - name: Extract and clean version
    set_fact:
      kubectl_version: "{{ (install_result.stdout | regex_search('Client Version: v?([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1')) | first }}"

  - name: Parse kustomize version number
    set_fact:
      kustomize_version: "{{ (install_result.stdout | regex_search('Kustomize Version: v?([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1')) | default(['unknown'], true) | first }}"

  - name: Show {{ app_name }} versions
    ansible.builtin.debug:
      msg: 
      - "{{ app_name }} version is {{ kubectl_version }}"
      - "Kustomize: {{ kustomize_version }}"

  when: 
    - (role in ['combi', 'master', 'worker']) or kubectl
    - kubectl and (binenv | default(false))
