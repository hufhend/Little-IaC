---
#   **************************************
#   Ansible AKS delete role - Ubuntu 24.04
#   begin     : Wed 26 Mar 2025
#   copyright : (c) 2025 Václav Dvorský
#   email     : hufhendr@gmail.com
#   $Id: delete.yaml, v1.04 28/03/2025
#   **************************************

#   --------------------------------------------------------------------
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public Licence as published by
#   the Free Software Foundation; either version 2 of the Licence, or
#   (at your option) any later version.
#   --------------------------------------------------------------------

#   This role is used to delete Azure Kubernetes Service resources in the 
#   Azure Arc cloud and is not and probably will not be optimized for 
#   running in Ansible Tower.

#   Usage:
#   You must create your own set of variables and then:
#   ansible-playbook azure.yml -e "@secrets/cluster_vars.yml"


# Run command to fetch the current status of the cluster
- name: Verify {{ cluster_name }} status
  command: >
    az aksarc show -g {{ resource_group }} -n {{ cluster_name }} --query "{provisioningState:properties.provisioningState,currentState:properties.status.currentState}" --output json
  register: status_output

# Display the current status of the cluster
- name: Display cluster status
  debug:
    msg:
    - "Cluster {{ cluster_name }} status:"
    - "{{ status_output.stdout.split('\\n') | join('

      ') }}"

# Display the delete command for the cluster
- name: Create a AKS delete command
  debug:
    msg: az aksarc delete --name {{ cluster_name }} --resource-group {{ resource_group }}

- name: Delete AKS cluster
  block:
  # Treatment of a known bug:
  # Can't fully delete AKS Arc cluster with PodDisruptionBudget (PDB) resources
  - name: Delete PDB for Azure webhook
    kubernetes.core.k8s:
      state: absent
      kind: PodDisruptionBudget
      name: azure-wi-webhook-controller-manager
      namespace: arc-workload-identity
    ignore_errors: true

  # Delete the cluster
  - name: Delete cluster {{ cluster_name }}
    command: >
      az aksarc delete --name {{ cluster_name }} --resource-group {{ resource_group }} --yes
    register: delete_output

  - name: Parse JSON and extract result
    ansible.builtin.set_fact:
      provisioning_state: "{{ (delete_output.stdout | from_json).properties.provisioningState }}"
    when: delete_output.stdout is defined

  - name: Show delete result
    ansible.builtin.debug:
      msg: "Provisioning state is: {{ provisioning_state }}"
    when: provisioning_state is defined

  when: delete
