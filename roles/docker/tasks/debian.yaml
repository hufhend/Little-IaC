---
- name: Install Docker - containers for applications
  block:
  - name: Install required system packages
    ansible.builtin.apt:
      pkg:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
      state: latest
      update_cache: true

  - name: Add Docker GPG Key
    ansible.builtin.apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      keyring: /usr/share/keyrings/docker.gpg
      state: present

  - name: List CPU architecture
    ansible.builtin.command: dpkg --print-architecture
    register: architecture

  - name: Add Docker repository
    ansible.builtin.apt_repository:
      repo: deb [arch={{ architecture.stdout }} signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
      state: present
      filename: docker

  - name: Install Docker
    ansible.builtin.apt:
      pkg:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-compose-plugin
      state: latest
      update_cache: true

  - name: Check if user is in docker group
    ansible.builtin.command: id -nG {{ ansible_user }}
    register: user_groups
    changed_when: false

  - name: Add current user to docker group
    ansible.builtin.user:
      name: "{{ docker_user }}"
      groups: docker
      append: yes

  # Restart only on first pass
  - name: Reboot the system
    ansible.builtin.reboot:
      msg: "Reboot initiated by Ansible for Docker installation"
      reboot_timeout: 600
    when: "'docker' not in user_groups.stdout.split()"

  # Show installed version
  - name: Get Docker version
    command: docker version
    register: docker_version_result

  - name: Get Docker Compose version
    command: docker compose version
    register: docker_compose_version_result

  - name: Extract Docker versions
    set_fact:
      docker_client_version: "{{ docker_version_result.stdout | regex_search('Client:.*\\n Version:\\s+([\\d.]+)', '\\1') | default(['unknown']) | first }}"
      docker_engine_version: "{{ docker_version_result.stdout | regex_search('Engine:\\s*\\n\\s+Version:\\s+([\\d.]+)', '\\1') | default(['unknown'], true) | first }}"
      containerd_version: "{{ docker_version_result.stdout | regex_search('containerd:\\s*\\n\\s+Version:\\s+([\\w.]+)', '\\1') | default(['unknown'], true) | first }}"
      runc_version: "{{ docker_version_result.stdout | regex_search('runc:\\s*\\n\\s+Version:\\s+([\\d.]+)', '\\1') | default(['unknown'], true) | first }}"
      docker_init_version: "{{ docker_version_result.stdout | regex_search('docker-init:\\s*\\n\\s+Version:\\s+([\\d.]+)', '\\1') | default(['unknown'], true) | first }}"
      docker_compose_version: "{{ docker_compose_version_result.stdout | regex_search('Docker Compose version v([\\d.]+)', '\\1') | default(['unknown'], true) | first }}"

  - name: Show Docker versions
    ansible.builtin.debug:
      msg:
      - "Docker client: {{ docker_client_version }}"
      - "Docker engine: {{ docker_engine_version }}, containerd: {{ containerd_version }}, runc: {{ runc_version }}, docker-init: {{ docker_init_version }}, compose: {{ docker_compose_version }}"  

  when: 
    - role not in ['combi', 'master', 'worker']
    - ansible_os_family | lower == "debian"
