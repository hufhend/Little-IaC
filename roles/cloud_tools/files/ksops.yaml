# KSOPS is a flexible kustomize plugin for SOPS encrypted resources
---
- name: Package Variable Setting
  ansible.builtin.set_fact:
    app: "ksops"
    app_name: "Ksops"
    version: "4.4.0"
    install_dir: "/home/{{ user_ansible }}/install/ksops"

# Verify installed version
- name: Check if {{ app_name }} is installed
  stat:
    path: "{{ app_dir }}/{{ app }}"
  register: app_installed

# View the latest stable version
- name: Get latest version from GitHub
  ansible.builtin.uri:
    url: "https://api.github.com/repos/viaduct-ai/kustomize-sops/releases/latest"
    return_content: yes
  register: github_release
  changed_when: false

- name: Set latest version
  ansible.builtin.set_fact:
    latest_version: "{{ github_release.json.tag_name | regex_replace('^v', '') }}"

- name: Show {{ app_name }} version
  ansible.builtin.debug:
    msg:
    - "The currently installed version is {{ version }}"
  when: app_installed.stat.exists

- name: Compare versions
  ansible.builtin.debug:
    msg: "A new version {{ latest_version }} is available! Consider updating."
  when: latest_version is version(version, '>') 

- name: Install {{ app_name }}
  block:
    # Download and verification steps
    - name: Create a install directory
      ansible.builtin.file:
        path: "{{ install_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        mode: '0755'

    - name: Install {{ app_name }}
      set_fact:
        arch_map:
          i386: i386
          i686: i386
          x86_64: x86_64
          aarch64: arm64
          arm64: arm64

    - name: Detect architecture
      set_fact:
        arch: "{{ arch_map.get(ansible_architecture, 'unknown') }}"

    - name: Detect platform
      ansible.builtin.set_fact:
        platform: "{{ ansible_system }}"

    - name: Define download URL
      ansible.builtin.set_fact:
        download_url: "https://github.com/viaduct-ai/kustomize-sops/releases/download/v{{ version }}"

    - name: Download {{ app_name }} archive
      ansible.builtin.get_url:
        url: "{{ download_url }}/ksops_{{ version }}_{{ platform }}_{{ arch }}.tar.gz"
        dest: "{{ install_dir }}/ksops_{{ version }}_{{ platform }}_{{ arch }}.tar.gz"
        mode: '0755'

    # Manual installation
    - name: Extract {{ app }} binary  
      ansible.builtin.unarchive:
        src: "{{ install_dir }}/ksops_{{ version }}_{{ platform }}_{{ arch }}.tar.gz"
        dest: "{{ install_dir }}"
        remote_src: yes

    - name: Move {{ app }} to local bin
      ansible.builtin.copy:
        src: "{{ install_dir }}/{{ app }}"
        dest: "{{ app_dir }}/{{ app }}"
        mode: '0755'
        owner: root
        group: root
        remote_src: yes
      register: mv_result

    - name: Fail if moving ksops fails
      fail:
        msg: "Failed to move ksops to {{ app_dir }}. Maybe you should run this playbook as root."
      when: mv_result.failed

    - name: Show {{ app_name }} version
      ansible.builtin.debug:
        msg: "{{ app_name }} version is {{ version }}"
      when: not mv_result.failed

    # Finally, let's clean up.
    - name: Clean up installation files
      ansible.builtin.file:
        path: "{{ install_dir }}"
        state: absent

  when: 
    - ksops == True
    - ansible_system in ["Linux", "Darwin"]
    - ansible_architecture in ["x86_64", "amd64"]
    - latest_version != version or app_installed.stat.exists == False
