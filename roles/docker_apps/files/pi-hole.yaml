---
# Self-hosted DNS service
- name: Set a app variable
  ansible.builtin.set_fact:
    app: "pi-hole"
    app_name: "Pi-hole"

- name: Check if {{ app_name }} exists
  ansible.builtin.stat:
    path: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}
  register: pihole_dir_check

- name: Deploy {{ app_name }}
  block:
  - name: Disable DNSStubListener
    ansible.builtin.lineinfile:
      path: /etc/systemd/resolved.conf
      regexp: '^#?DNSStubListener='
      line: 'DNSStubListener=no'
      backrefs: yes
    become: true
    become_user: root

  - name: Disable Cloudflare default DNS
    ansible.builtin.lineinfile:
      path: /etc/systemd/resolved.conf
      regexp: '^DNS=1\.0\.0\.1'
      line: '#DNS=1.0.0.1'
      state: present
      backrefs: yes
    become: true
    become_user: root

  - name: Remove resolv.conf symlink
    ansible.builtin.file:
      path: /etc/resolv.conf
      state: absent
    become: true
    become_user: root

  - name: Create symlink to new resolv.conf
    ansible.builtin.file:
      src: /run/systemd/resolve/resolv.conf
      dest: /etc/resolv.conf
      state: link
    become: true
    become_user: root

  - name: Restart systemd-resolved
    ansible.builtin.systemd:
      name: systemd-resolved
      state: restarted
    become: true
    become_user: root

  - name: Git clone {{ app_name }}
    ansible.builtin.git:
      repo: 'https://gitlab.torproject.org/hufhendr/pi-hole.git'
      dest: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}
      force: true

  - name: Create a directory structure
    ansible.builtin.command: sh init.sh
    args:
      chdir: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}

  # Download custom configuration from private Git
  - name: Include config tasks
    ansible.builtin.include_tasks: "{{ role_path }}/tasks/config.yaml"

  - name: Change ownership of bind directory
    ansible.builtin.file:
      path: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}/bind
      owner: 100
      group: 101
      mode: '0750'
      recurse: yes
    become: true
    become_user: root

  - name: Find existing netplan files
    ansible.builtin.find:
      paths: /etc/netplan
      patterns: "*"
      file_type: file
    register: netplan_files

  - name: Rename existing netplan files
    ansible.builtin.command:
      cmd: mv "{{ netplan_file.path }}" "{{ netplan_file.path }}.bak"
    loop: "{{ netplan_files.files }}"
    loop_control:
      loop_var: netplan_file
    become: true
    become_user: root

  # This adds docker DNS to the first place
  # Up until now they are using DNS from DHCP, if something doesn't work, check them first
  - name: Upload the netplan template
    ansible.builtin.template:
      src: templates/ansible_pihole.j2
      dest: "/etc/netplan/ansible-pihole.yaml"
      owner: root
      group: root
      mode: '0600'
    become: true
    become_user: root 
    notify: Apply netplan configuration

  - name: Set installed variable
    ansible.builtin.set_fact:
      "pihole_installed": true

  # Start the application 
  - name: Create and start {{ app_name }}
    community.docker.docker_compose_v2:
      project_src: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}

  when: 
    - pihole == true
    - not pihole_dir_check.stat.exists


- name: Configuration {{ app_name }}
  block:
  - name: Include config tasks
    ansible.builtin.include_tasks: "{{ role_path }}/tasks/config.yaml"

  - name: Change ownership of bind directory
    ansible.builtin.file:
      path: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}/bind
      owner: 100
      group: 101
      mode: '0750'
      recurse: yes
    become: true
    become_user: root

  # Start the application 
  - name: Create and start {{ app_name }}
    community.docker.docker_compose_v2:
      project_src: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}

  when: 
    - pihole == true
    - pihole_installed | default(false) != true
