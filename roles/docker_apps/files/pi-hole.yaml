---
# Self-hosted DNS service
- name: Deploy Pi-hole
  block:
  - name: Set a fact variable
    ansible.builtin.set_fact:
      app: "pi-hole"

  - name: Check if Pi-hole exists
    ansible.builtin.stat:
      path: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}
    register: pihole_dir_check

  - name: Build Pi-hole on OrangePi
    block:
      - name: Disable DNSStubListener
        ansible.builtin.lineinfile:
          path: /etc/systemd/resolved.conf
          regexp: '^#?DNSStubListener='
          line: 'DNSStubListener=no'
          backrefs: yes
        become: true
        become_user: root

      - name: Remove resolv.conf symlink
        ansible.builtin.file:
          path: /etc/resolv.conf
          state: absent
        become: true
        become_user: root      

      - name: Create symlink to resolv.conf
        ansible.builtin.file:
          src: /run/systemd/resolve/resolv.conf
          dest: /etc/resolv.conf
          state: link
        become: true
        become_user: root

      - name: Restart systemd-resolved
        ansible.builtin.systemd:
          name: systemd-resolved
          state: restarted
        become: true
        become_user: root

      - name: Pi-hole Git clone
        ansible.builtin.git:
          repo: 'https://gitlab.torproject.org/hufhendr/pi-hole.git'
          dest: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}
          force: true

      - name: Create a directory structure
        ansible.builtin.command: sh init.sh
        args:
          chdir: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}

      - name:  Get the configuration from Git
        ansible.builtin.git:
          repo: "{{ private_repo }}"
          dest: /tmp/config
          force: true
        ignore_errors: true

      - name:  Copy the relevant config files
        ansible.builtin.command: sudo rsync -ra /tmp/config/{{ inventory_hostname }}/pi-hole/ /home/{{ docker_user }}/{{ docker_home }}/{{ app }}
        ignore_errors: true

      - name: Delete temporary files
        ansible.builtin.file:
          path: /tmp/config
          state: absent
        ignore_errors: true

      - name: Tear down Pi-hole services
        community.docker.docker_compose_v2:
          project_src: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}
          state: absent

      - name:  Delete everything old
        ansible.builtin.command: docker system prune -af --volumes

      - name: Create and start {{ app }}
        community.docker.docker_compose_v2:
          project_src: /home/{{ docker_user }}/{{ docker_home }}/{{ app }}
        # register: output

      - name: Find existing netplan files
        ansible.builtin.find:
          paths: /etc/netplan
          patterns: "*"
          file_type: file
        register: netplan_files

      - name: Rename existing netplan files
        ansible.builtin.command:
          cmd: mv "{{ netplan_file.path }}" "{{ netplan_file.path }}.bak"
        loop: "{{ netplan_files.files }}"
        loop_control:
          loop_var: netplan_file
        become: true
        become_user: root

      # - name: Set DNS server to Docker Pi-hole
      #   community.general.nmcli:
      #     conn_name: "{{ ansible_default_ipv4.interface }}"
      #     type: "{{ 'ethernet' if ansible_default_ipv4.type == 'ether' else ansible_default_ipv4.type }}"
      #     dns4:
      #     - 127.0.0.1
      #     state: present
      #   become: true
      #   become_user: root 
      #   # notify: Restart NetworkManager

      # - name: Ignore automatically configured DNS
      #   community.general.nmcli:
      #     conn_name: "{{ ansible_default_ipv4.interface }}"
      #     type: "{{ 'ethernet' if ansible_default_ipv4.type == 'ether' else ansible_default_ipv4.type }}"
      #     dns4_ignore_auto: true
      #     state: present
      #   # notify: Restart NetworkManager

      - name: Upload the netplan template
        ansible.builtin.template:
          src: templates/ansible_pihole.j2
          dest: "/etc/netplan/ansible-pihole.yaml"
          owner: root
          group: root
          mode: '0600'
        become: true
        become_user: root 
        notify: Apply netplan configuration

      # - name: Remove default nameserver
      #   ansible.builtin.lineinfile:
      #     path: /etc/resolv.conf
      #     state: absent
      #     regexp: '^nameserver 1\.0\.0\.1$'
      #   become: true
      #   become_user: root      

    when: not pihole_dir_check.stat.exists
  when: pihole == true