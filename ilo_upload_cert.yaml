#   ********************************************
#   Upload SSL Certificate to hp iLO via Ansible 
#   begin     : Fri 11 Oct 2024
#   copyright : (c) 2024 Václav Dvorský
#   email     : hufhendr@gmail.com
#   $Id: ilo_upload_cert.yaml, v1.60  27/12/2024
#   ********************************************

#   --------------------------------------------------------------------
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public Licence as published by
#   the Free Software Foundation; either version 2 of the Licence, or
#   (at your option) any later version.
#   --------------------------------------------------------------------

#   Usage:
#   Modify the variables according to your environment and simply run
#   ansible-playbook ilo_upload_cert.yaml

#   What it does:
#   The main function of the script is to fetch the Let's Encrypt SSL 
#   certificate from Kubernetes, transform it in RAM and upload it via API 
#   to HPE Integrated Lights-Out.

- hosts: localhost
  vars:
    ilo_username: "username"
    ilo_password: "password"
    ilo_url: "ilo.example.cz"
    k8s_secret_name: "ilo-tls-secret"
    k8s_namespace: "cert-manager"
  tasks:

    # Pick up the secret with the certificate and key from Kubernetes
    # There it is downloaded via cert-manager
    - name: Get Kubernetes secret
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ k8s_secret_name }}"
        namespace: "{{ k8s_namespace }}"
      register: secret_info

    # Part of decoding the certificate and key
    - name: Extract TLS certificate from secret
      ansible.builtin.set_fact:
        cert_content_base64: "{{ secret_info.resources[0].data['tls.crt'] }}"

    - name: Decode TLS certificate from base64
      ansible.builtin.set_fact:
        cert_content: "{{ cert_content_base64 | b64decode }}"

    - name: Extract private key from secret
      ansible.builtin.set_fact:
        key_content_base64: "{{ secret_info.resources[0].data['tls.key'] }}"

    - name: Decode private key from base64
      ansible.builtin.set_fact:
        key_content: "{{ key_content_base64 | b64decode }}"

    # Analyzing and displaying key SSL certificate information
    - name: Analyze TLS certificate using x509_info
      community.crypto.x509_certificate_info:
        content: "{{ cert_content }}"
      register: cert_info

    # Displaying the certificate information 
    - name: Show certificate details
      debug:
        msg:
          - "Issuer: {{ cert_info.issuer.organizationName }} ({{ cert_info.issuer.countryName }})"
          - "Common Name: {{ cert_info.subject.commonName }}"
          - "Valid From:  {{ (cert_info.not_before | regex_replace('Z$', '') | to_datetime('%Y%m%d%H%M%S')).strftime('%d.%m.%Y %H:%M:%S') }} UTC"
          - "Valid Until: {{ (cert_info.not_after | regex_replace('Z$', '') | to_datetime('%Y%m%d%H%M%S')).strftime('%d.%m.%Y %H:%M:%S') }} UTC"
          - "Expired: {{ cert_info.expired }}"
          - "Key Usage: {{ cert_info.key_usage | join(', ') }}"
          - "Extended Key Usage: {{ cert_info.extended_key_usage | join(', ') }}"
          - "Public Key Size: {{ cert_info.public_key_data.size }} bits"
          - "SHA256 Fingerprint: {{ cert_info.fingerprints.sha256 }}"

    # Combining the certificate and key into a format for the iLO Redfish API
    - name: Combine certificate and private key
      ansible.builtin.set_fact:
        combined_cert_key: "{{ cert_content | regex_replace('\\n', '\\\\n') }}\\n{{ key_content | regex_replace('\\n', '\\\\n') }}"

    # Downloading the certificate from the iLO server
    - name: Get expiration from iLO
      ansible.builtin.shell:
        cmd: "echo | openssl s_client -connect {{ ilo_url }}:443 -servername {{ ilo_url }} 2>/dev/null | openssl x509 -noout -enddate | sed 's/notAfter=//' | xargs -I{} date -u -d '{}' +%Y%m%d%H%M%SZ"
      register: cert_info_run

    # Convert the dates to integers for comparison
    - name: Convert dates to integers
      ansible.builtin.set_fact:
        ilo_cert_date: "{{ cert_info_run.stdout | regex_replace('Z$', '') | int }}"
        k8s_cert_date: "{{ cert_info.not_after | regex_replace('Z$', '') | int }}"

    # Compare the expiration dates of the certificates
    # It is used only for displaying on the screen
    - name: Compare certificate dates
      vars:
        msg: |
          {% set ilo_readable = (ilo_cert_date | string | to_datetime('%Y%m%d%H%M%S')).strftime('%d.%m.%Y %H:%M:%S') %}
          {% set k8s_readable = (k8s_cert_date | string | to_datetime('%Y%m%d%H%M%S')).strftime('%d.%m.%Y %H:%M:%S') %}
          {% if ilo_cert_date > k8s_cert_date %}
          iLO certificate is newer:
          - Expiry: {{ ilo_readable }} UTC
          - Compared to Kubernetes certificate: {{ k8s_readable }} UTC
          {% elif ilo_cert_date < k8s_cert_date %}
          Kubernetes certificate is newer:
          - Expiry: {{ k8s_readable }} UTC
          - Compared to iLO certificate: {{ ilo_readable }} UTC
          {% else %}
          Both certificates expire at the same time:
          - Expiry: {{ ilo_readable }} UTC
          {% endif %}
      debug:
        msg: "{{ msg.split('\n') }}"

    # Part of uploading a new certificate to the iLO server
    - block:
      - name: Get iLO session token
        ansible.builtin.uri:
          url: "https://{{ ilo_url }}/redfish/v1/Sessions"
          method: POST
          body_format: json
          headers:
            Content-Type: "application/json"
          body: |
            {
              "UserName": "{{ ilo_username }}",
              "Password": "{{ ilo_password }}"
            }
          validate_certs: no
          status_code: [200, 201]
        register: session_response

      # Uploading a Let's Encrypt SSL certificate to HPE Integrated Lights-Out
      - name: Upload SSL certificate to iLO
        ansible.builtin.uri:
          url: "https://{{ ilo_url }}/redfish/v1/Managers/1/SecurityService/HttpsCert/Actions/HpeHttpsCert.ImportCertificate"
          method: POST
          headers:
            Content-Type: "application/json"
            X-Auth-Token: "{{ session_response.x_auth_token }}"
          body_format: json
          body: |
            {
              "Certificate": "{{ combined_cert_key }}"
            }
          validate_certs: no
        delegate_to: localhost
      
      when: ilo_cert_date < k8s_cert_date
