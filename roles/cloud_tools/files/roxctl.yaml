# roxctl is a command-line interface (CLI) for running commands on Red Hat 
# Advanced Cluster Security for Kubernetes.
---
- name: Package Variable Setting
  ansible.builtin.set_fact:
    app: "roxctl"
    app_name: "roxctl CLI"
    version: "4.8.4"
    install_dir: "/home/{{ user_ansible }}/install/roxctl"

# Verify installed version
- name: Check if {{ app_name }} is installed
  stat:
    path: "{{ app_dir }}/{{ app }}"
  register: app_installed

- block:
    - name: Verify {{ app_name }} version
      ansible.builtin.command: "{{ app_dir }}/{{ app }} version"
      register: install_result
      changed_when: false

    - name: Extract and clean version
      set_fact:
        installed_version: "{{ install_result.stdout | regex_replace('^.*(\\d+\\.\\d+\\.\\d+).*$', '\\1') }}"
  when: app_installed.stat.exists

# View the latest stable version
- name: Show {{ app_name }} version
  ansible.builtin.debug:
    msg:
    - "The installed version was detected: {{ installed_version }}"
    - "The currently installed version is: {{ version }}"
  when: app_installed.stat.exists

- name: Install {{ app_name }}
  block:
  # Download and integrity verification
  - name: Create a install directory
    ansible.builtin.file:
      path: "{{ install_dir }}"
      state: directory
      owner: "{{ ansible_user }}"
      mode: '0755'

  - name: Detect platform
    ansible.builtin.set_fact:
      platform: "{{ ansible_system }}"

  - name: Define architecture map
    ansible.builtin.set_fact:
      arch_map:
        x86_64: 
        arm64: -arm64
        aarch64: -arm64
        ppc64le: -ppc64le
        s390x: -s390x

  - name: Detect architecture
    ansible.builtin.set_fact:
      arch: "{{ arch_map.get(ansible_architecture, 'unknown') }}"
      
  - name: Define download URL
    ansible.builtin.set_fact:
      download_url: "https://mirror.openshift.com/pub/rhacs/assets/{{ version }}/bin/{{ platform }}"

  - name: Download {{ app_name }} checksum
    ansible.builtin.get_url:
      url: "{{ download_url }}/sha256sum.txt"
      dest: "{{ install_dir }}/sha256sum.txt"
      mode: '0644'
      force: yes

  - name: Download {{ app_name}} binary
    ansible.builtin.get_url:
      url: "{{ download_url }}/{{ app }}{{ arch }}"
      dest: "{{ install_dir }}/{{ app }}{{ arch }}"
      mode: '0644'

  - name: Verify checksum of {{ app_name }}
    ansible.builtin.command:
      cmd: sha256sum -c {{ install_dir }}/sha256sum.txt --ignore-missing
      chdir: "{{ install_dir }}"
    register: checksum_result
    failed_when: false
    changed_when: false

  - name: Fail and cleanup if checksum failed
    ansible.builtin.fail:
      msg: "Checksum verification failed! Please clean up {{ install_dir }} and try again."
    when: "'FAILED' in checksum_result.stdout"

  # Manual installation of a binary application
  - name: Move {{ app }} to local bin
    ansible.builtin.copy:
      src: "{{ install_dir }}/{{ app }}{{ arch }}"
      dest: "{{ app_dir }}/{{ app }}"
      mode: '0755'
      remote_src: yes

  # Completion script tasks
  - name: Generate completion script
    command: "{{ app_dir }}/{{ app }} completion bash"
    register: completion_script
    changed_when: false

  - name: Save completion script
    copy:
      content: "{{ completion_script.stdout }}"
      dest: "/etc/bash_completion.d/{{ app }}"
      mode: "0644"
  
  # Show installed version
  - name: Verify {{ app_name }} version
    ansible.builtin.command: "{{ app_dir }}/{{ app }} version"
    register: install_result
    changed_when: false

  - name: Extract and clean version
    set_fact:
      new_version: "{{ install_result.stdout | regex_replace('^.*(\\d+\\.\\d+\\.\\d+).*$', '\\1') }}"
      
  - name: Show {{ app_name }} version
    ansible.builtin.debug:
      msg: "{{ app_name }} version is {{ new_version }}"

  # Finally, let's clean up.
  - name: Clean up installation files
    ansible.builtin.file:
      path: "{{ install_dir }}"
      state: absent

  when: 
    - roxctl == True
    - ansible_architecture == "x86_64"
    - installed_version is not defined or installed_version != version